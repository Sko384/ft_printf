プロジェクトは C言語 で記述しなければなりません。

プロジェクトは Norm（コード規約） に従って書かれていなければなりません。
ボーナスのファイルや関数も Norm のチェック対象であり、Normエラーがあると評価は0点になります。

あなたの関数は、未定義動作を除いて、セグメンテーションフォルト、バスエラー、
二重解放などで異常終了してはいけません。これが発生した場合、そのプロジェクトは機能しないものと見なされ、
評価は0点になります。

ヒープ領域に確保したメモリは、必要に応じて適切に解放しなければなりません。メモリリークは許容されません。

指定がある場合、提出物には Makefile を含める必要があります。その Makefile は、cc を使い、
-Wall -Wextra -Werror のフラグでソースファイルをコンパイルする必要があります。
また、不要な再リンク（relink）をしてはいけません。

Makefile には、少なくとも以下のルールが含まれている必要があります：$(NAME), all, clean, fclean, re

ボーナスを提出する場合、Makefile に bonusルール を追加しなければなりません。
そのルールでは、本体部分で許可されていないヘッダやライブラリ、関数をすべて含める必要があります。
ボーナスのソースコードは _bonus.c および _bonus.h のように命名されたファイルに置く必要があります
（別途指示がない限り）。本体とボーナスの評価は別々に行われます。

プロジェクトで libft を使用することが許可されている場合は、libft のソースコードおよび
その Makefile を libft フォルダにコピーする必要があります。プロジェクトの Makefile は、
まず libft の Makefile を使ってライブラリをビルドし、その後プロジェクトをビルドする必要があります。

テストプログラムの作成は推奨されています。提出や評価の対象にはなりませんが、自身や他人のコードを
テストするのに非常に役立ちます。特に口頭試問（ディフェンス）時に、自分や相手のテストを使って
評価することができます。

課題は指定された Git リポジトリに提出する必要があります。評価の対象になるのはその Git リポジトリ内の
内容のみです。

評価が Deepthought によって行われる場合、それはピア評価の後になります。Deepthought による評価中に
エラーが発生した場合、その時点で評価は中止されます。

元の printf() のバッファ管理は実装してはいけません。

あなたの関数は、以下の変換指定子に対応している必要があります：c, s, p, d, i, u, x, X, %

あなたの実装は、元の printf() の動作と比較されて評価されます。

ライブラリを作成する際には、ar コマンドを使用しなければなりません。

libtool コマンドの使用は厳禁です。

libftprintf.a は、リポジトリのルートに作成されていなければなりません。


以下の変換指定子を実装する必要があります：

c%：1文字を出力します。

%s：文字列を出力します（C言語の一般的な仕様に従います）。

%p：void * 型のポインタ引数を16進数形式で出力します。

%d：10進数（符号付き）で数値を出力します。

%i：10進数（符号付き）で整数を出力します（%d と同じ動作）。

%u：符号なし10進数で数値を出力します。

%x：16進数（小文字）で数値を出力します。

%X：16進数（大文字）で数値を出力します。

%%：パーセント記号（%）を出力します。
